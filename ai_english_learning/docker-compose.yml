version: '3.8'

services:
  # AI英语学习后端服务
  ai-english-backend:
    build:
      context: ./serve
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - SERVER_MODE=release
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - DATABASE_USER=ai_english
      - DATABASE_PASSWORD=ai_english_password
      - DATABASE_NAME=ai_english_learning
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - APP_ENVIRONMENT=docker
      - LOG_LEVEL=info
      - LOG_OUTPUT=both
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./serve/logs:/root/logs
      - ./serve/config:/root/config
    networks:
      - ai-english-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL数据库
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: ai_english_learning
      MYSQL_USER: ai_english
      MYSQL_PASSWORD: ai_english_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docs/database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai-english-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-english-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-english-backend
    networks:
      - ai-english-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-english-network:
    driver: bridge